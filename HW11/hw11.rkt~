; Leave the test outputs in. 

; Q1 (5 points)
; Enter your code here
(- 8 (- (* 3 5) 2))                                                                       ; 1.1
(+ (* (/ 8 4) (* 3 2)) (+ 8 (* 2 3)))                                                     ; 1.2
(+ 4 (* 8 (- (+ 4 4) (* 3 (* 3 2)))))                                                     ; 1.3
(* (- 10 9) (+ 2 (/(+ (- 3 2) (* 3 9)) (+ 1 3))))                                         ; 1.4
(+ (+ (* (- (/ (+ 1 (* 6 2) 5 8)  2) 8) 2) 6) (- (/ (+ (* 4 7) (* 2 4)) 4) (* 2 5)))      ; 1.5

; Q2 Multiply (5 points)
(define Multiply
	; Enter your code here
  (lambda (x y)
    (* x y)
  )
)

(Multiply 5 2)

; Q3 Exponent (5 points)
(define Exponent 
	; Enter your code here
  (lambda (x y)
    (if (= y 0)                                           ; case if raised to the 0th exponent
        1
    )
    (if (= y 1)                                           ; base case
        x
        (* x (Exponent x (- y 1)))                        ; recursive call for x * x^(y-1)
    )
  )
)
    
  
(Exponent 4 3)

; Q4 (5 points)
;(define PerfectDivision
	; Enter your code here

;(PerfectDivision 4 5)
;(PerfectDivision 8 4)

; Q5 (5 points)
;(define AddExponents
	; Enter your code here

;(AddExponents 2 3 4 2)

; Q6 (5 points)
;(define (MultiplyLet x y)
  	; Enter your code here

;(MultiplyLet 6 9)

; Q7 (5 points)
;(define (Letexpression)
  	; Enter your code here

;(Letexpression)

; Q8 (5 points)
;(define accumulator	; recursive
  	; Enter your code here
;)

;(accumulator 3 4 0 0)
